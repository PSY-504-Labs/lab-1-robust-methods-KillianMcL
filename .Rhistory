post = c(18,21,16,22,19,24,17,21,23,18)
pdiff0 = post-pre
Xpdiff0 = mean(pdiff0)
pdiff1 = boot(pdiff0, mean_func, R = 10000)
pdiff1_bca = boot.ci(pdiff1, type = "bca", conf = .95)
pdiff1_bca
pdiff1_mean_dist = data.frame(mean = pdiff1$t)
pdiff1_mean_dist %>% ggplot(aes(mean)) +
geom_histogram(bins = 30) +
ggtitle("Bootstrapped Mean Distribution with Confidence Intervals (BCA)") +
ylab("Frequency") +
xlab("Mean") +
geom_vline(xintercept = mean(pdiff1$t), color = "#84a59d", linetype = "solid", linewidth = .75) +
geom_vline(xintercept = pdiff1_bca$bca[4], color = "#f28482", linetype = "dashed", linewidth = .75) +
geom_vline(xintercept = pdiff1_bca$bca[5], color = "#f28482", linetype = "dashed", linewidth = .75) +
annotate("text", x = mean(pdiff1$t) - .25, y = max(table(pdiff1$t)) + 470, label = "Mean", color = "#84a59d", size = 3.75) +
annotate("text", x = pdiff1_bca$bca[4] - .35, y = max(table(pdiff1$t)) + 470, label = "CI (BCA)", color = "#f28482", size = 3.75) +
theme(panel.background = element_rect(fill = "transparent"))
pdiff1_mean_dist %>% ggplot(aes(mean)) +
geom_histogram(bins = 30) +
ggtitle("Bootstrapped Mean Distribution with Confidence Intervals (BCA)") +
ylab("Frequency") +
xlab("Mean") +
geom_vline(xintercept = mean(pdiff1$t), color = "#84a59d", linetype = "solid", linewidth = .75) +
geom_vline(xintercept = pdiff1_bca$bca[4], color = "#f28482", linetype = "dashed", linewidth = .75) +
geom_vline(xintercept = pdiff1_bca$bca[5], color = "#f28482", linetype = "dashed", linewidth = .75) +
annotate("text", x = mean(pdiff1$t) - .25, y = max(table(pdiff1$t)) + 500, label = "Mean", color = "#84a59d", size = 3.75) +
annotate("text", x = pdiff1_bca$bca[4] - .35, y = max(table(pdiff1$t)) + 500, label = "CI (BCA)", color = "#f28482", size = 3.75) +
theme(panel.background = element_rect(fill = "transparent"))
#read data.table to read in
chili<- read.delim("https://raw.githubusercontent.com/jgeller112/psy504-advanced-stats/main/slides/03-Robust_Methods/data/chillis.csv")
View(chili)
View(chili)
my_penguins <- penguins %>%
filter(species == "Adelie",
!is.na(sex),
island == "Torgersen")
my_penguins
View(my_penguins)
my_penguins %>% ggplot(aes(sex, body_mass_g))
my_penguins %>% ggplot(aes(sex, body_mass_g)) + geom_point()
my_penguins %>% ggplot(aes(sex, body_mass_g, fill = sex)) + geom_point()
my_penguins %>% ggplot(aes(sex, body_mass_g, fill = sex)) +
geom_point() +
scale_fill_manual(values = c("#ff006e", "#3a86ff"))
my_penguins %>% ggplot(aes(sex, body_mass_g, fill = sex)) +
geom_point(aes(color = fill)) +
scale_fill_manual(values = c("#ff006e", "#3a86ff"))
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point(aes(color = fill)) +
scale_fill_manual(values = c("#ff006e", "#3a86ff"))
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point() +
scale_fill_manual(values = c("#ff006e", "#3a86ff"))
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point() +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_violin() +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_violin() +
geom_jitter(width = .1, height = 0, alpha = .5) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point() +
geom_jitter(width = .1) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point(size = 3) +
geom_jitter(width = .1) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point(size = 3) +
geom_jitter(width = .5) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point() +
geom_jitter(width = .2) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point() +
geom_jitter(width = .2, alpha = .25) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point() +
geom_jitter(width = .2, height = 0, alpha = .25) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point() +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point(position = position_jitter(width = .1, height = 0)) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point(position = position_jitter(width = .1, height = 0), size = 2) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point(position = position_jitter(width = .1, height = 0), size = 3) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point(position = position_jitter(width = .25, height = 0), size = 3) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point(position = position_jitter(width = .15, height = 0), size = 3) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point(position = position_jitter(width = .15, height = 0), size = 3, alpha = .5) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point(position = position_jitter(width = .15, height = 0), size = 3, alpha = .25) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point(position = position_jitter(width = .15, height = 0), size = 3, alpha = .75) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point(position = position_jitter(width = .15, height = 0), size = 3, alpha = .65) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point(position = position_jitter(width = .15, height = 0), size = 4, alpha = .65) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
my_penguins %>% group_by(sex) %>%
summarize(mean_mass_g = mean(body_mass_g)) %>%
mutate(mean_sex_difference_mass = mean_mass_g - (mean(mean_mass_g)))
my_penguins %>% group_by(sex) %>%
summarize(mean_mass_g = mean(body_mass_g))
my_penguins %>% group_by(sex) %>%
summarize(mean_mass_g = mean(body_mass_g))
3395.833 - 4034.783
my_penguins %>% group_by(sex) %>%
summarize(mean_mass_g = mean(body_mass_g)) %>%
spread(sex, mean_mass_g)
my_penguins %>% group_by(sex) %>%
summarize(mean_mass_g = mean(body_mass_g)) %>%
spread(sex, mean_mass_g) %>%
mutate(difference = male - female)
my_penguins %>% group_by(sex) %>%
summarize(mean_mass_g = mean(body_mass_g)) %>%
spread(sex, mean_mass_g) %>%
mutate(difference = male - female)
my_penguins %>% group_by(sex) %>%
summarize(mean_mass_g = mean(body_mass_g)) %>%
spread(sex, mean_mass_g) %>%
mutate(difference = male - female)
my_penguins %>%
group_by(sex) %>%
summarise(mean_mass_g = mean(body_mass_g)) %>%
summarise(mean_diff = diff(mean_mass_g))
my_penguins %>%
group_by(sex) %>%
summarise(mean_mass_g = mean(body_mass_g)) %>%
summarise(mean_diff = diff(mean_mass_g))
my_penguins %>%
specify(body_mass_g ~ sex) %>%
calculate(stat = "diff in means")
my_penguins %>%
specify(body_mass_g ~ sex) %>%
calculate(stat = "diff in means", order = c("male", "female"))
null_dist = my_penguins %>%
specify(body_mass_g ~ sex) %>%
hypothesize(null = "independence") %>%
generate(reps = 10000, type = "permute") %>%
calculate(stat = "diff in means")
null_dist = my_penguins %>%
specify(body_mass_g ~ sex) %>%
hypothesize(null = "independence") %>%
generate(reps = 10000, type = "permute") %>%
calculate(stat = "diff in means", order = c("male", "female"))
View(result_mdn)
View(null_dist)
sample_diff = my_penguins %>%
specify(body_mass_g ~ sex) %>%
calculate(stat = "diff in means", order = c("male", "female"))
sample_diff
sample_diff[1, 1]
sample_diff[1]
View(sample_diff)
sample_diff$stat
sample_diff$stat
null_dist %>%
visualize() +shade_p_value(obs_stat = sample_diff, direction = "two-sided")
??visualize
??shade_p_value
null_dist = my_penguins %>%
specify(body_mass_g ~ sex) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000000, type = "permute") %>%
calculate(stat = "diff in means", order = c("male", "female"))
null_dist %>%
visualize() + shade_p_value(obs_stat = sample_diff, direction = "two-sided")
null_dist = my_penguins %>%
specify(body_mass_g ~ sex) %>%
hypothesize(null = "independence") %>%
generate(reps = 10000, type = "permute") %>%
calculate(stat = "diff in means", order = c("male", "female"))
null_dist %>%
visualize() + shade_p_value(obs_stat = sample_diff, direction = "two-sided")
??get_p_value
null_dist %>%
get_p_value(obs_stat = sample_diff, direction = 'two-sided')
p = null_dist %>%
get_p_value(obs_stat = sample_diff, direction = 'two-sided')
p
p$p_value
null_dist %>%
get_p_value(obs_stat = sample_diff, direction = 'two-sided')
fac_data<-read_csv("https://raw.githubusercontent.com/jgeller112/psy503-psych_stats/master/static/assignment/data/fact_final.csv")
View(fac_data)
model = aov(errors ~ convo * drive, data = fac_data)
??aov
?aov()
#Output the results
summary(model)
?lm
mod = lm(errors ~ convo * drive, data = fac_data)
summary(mod)
?gss
fac_data %>%
specify(errors ~ convo * drive) %>%
calculate(stat = "F")
fac_data %>%
specify(errors ~ convo) %>%
calculate(stat = "F")
fac_data %>%
specify(errors ~ convo * drive) %>%
calculate(stat = "F")
fac_data<-read_csv("https://raw.githubusercontent.com/jgeller112/psy503-psych_stats/master/static/assignment/data/fact_final.csv")
#Fit the model
model = aov(errors ~ convo * drive, data = fac_data)
#Output the results
summary(model)
f_hat = summary(model)$`F value`[3]
summary(model)$`F value`[3]
summary(model)$`F value`
summary(model)$"F value"
summary(model)[[1]]
summary(model)[[1]]["F value"]
summary(model)[[1]]["F value"][3]
summary(model)[[1]][["F value"]]
summary(model)[[1]][["F value"]][3]
F_observed = summary(model)[[1]][["F value"]][3]
null_dist2 <- fac_data %>%
specify(errors ~ convo * drive) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "F")
null_dist2 <- fac_data %>%
fit(errors ~ convo * drive) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "F")
?infer::fit
?aovperm()
permuco::aovperm(errors ~ convo * drive, data = fac_data, np = 10000, type = "permutation")
df <- data.frame(hours=c(1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4,
4, 5, 5, 5, 6, 6, 7, 7, 8),
score=c(67, 68, 74, 70, 71, 75, 80, 70, 84, 72,
88, 75, 95, 75, 99, 78, 99, 65, 96, 70))
mod = lm(score ~ hours, data = df)
summary(mod)
performance::check_model(mod)
performance::check_model(mod)
library(performance)
install.packages('insight')
install.packages("insight")
library(performance)
performance::check_model(mod)
?performance::check_model
performance::check_model(mod, panel = FALSE)
performance::check_model(mod, panel = FALSE)
performance::check_model(mod, panel = FALSE)
#| message: false
#|
library(tidyverse)
library(robustbase) # star data
library(boot) # bootstrapping
library(correlation) # get different correlations
library(permuco) # run permutation tests
library(parameters) # SE
library(data.table) # fread
library(infer) # sample_rep_n function
library(palmerpenguins) # penguins dataset
#Additional packages
library(datawizard) #For Winsorizing
library(gridExtra) #For Visualizing
stars<-robustbase::starsCYG
stars %>% ggplot(aes(log.Te, log.light)) +
geom_point(size = 4, alpha = .75) +
geom_smooth(method = 'lm', se = FALSE, color = '#84a59d') +
ylab("Light Intensity") +
xlab("Surface Temperature")
cor.test(stars$log.Te, stars$log.light, method = c("pearson"))
##Manual Winsorizing
stars_win = stars %>% dplyr::summarise(log.Te_win = datawizard::winsorize(log.Te),
log.light_win = datawizard::winsorize(log.light))
cor.test(stars_win$log.Te_win, stars_win$log.light_win, method = c("pearson"))
correlation::correlation(stars, winsorize = .2)
p1 = stars %>% ggplot(aes(log.Te, log.light)) +
geom_point(size = 4, alpha = .75) +
geom_smooth(method = "lm", se = FALSE, color = '#84a59d') +
ggtitle("Raw Values") +
ylab("Light Intensity") +
xlab("Surface Temperature")
p2 = stars_win %>% ggplot(aes(log.Te_win, log.light_win)) +
geom_point(size = 4, alpha = .75) +
geom_smooth(method = "lm", se = FALSE,  color = '#84a59d') +
ggtitle("Winsorized Values") +
ylab("Light Intensity") +
xlab("Surface Temperature")
grid.arrange(p1, p2, ncol = 2)
data = c(8.453532, 10.025041, 11.495339, 9.367600, 8.333229, 9.788753, 10.883344, 10.543059, 9.869095, 10.799819)
mean_func = function(data, indices) {
return(mean(data[indices]))
}
result = boot(data, mean_func, R = 10000)
boot_means = data.frame(mean = result$t)
boot_means %>% ggplot(aes(mean)) +
geom_histogram(bins = 30) +
ggtitle("Bootstrapped Mean Distribution") +
xlab("Mean") +
ylab("Frequency")
mdn_func = function(data, indices) {
return(median(data[indices]))
}
result_mdn = boot(data, mdn_func, R = 10000)
boot_mdns = data.frame(mdn = result_mdn$t)
boot_mdns %>% ggplot(aes(mdn)) +
geom_histogram(bins = 30) +
ggtitle("Bootstrapped Median Distribution") +
xlab("Median") +
ylab("Frequency")
percentile_ci = boot.ci(result, type = "perc", conf = .95)
bca_ci = boot.ci(result, type = "bca", conf = .95)
boot_means %>% ggplot(aes(mean)) +
geom_histogram(bins = 30, fill = "#6A5B6E") +
ggtitle("Bootstrapped Mean Distribution with Confidence Intervals (Percentile and BCA)") +
xlab("Mean") +
ylab("Frequency") +
geom_vline(xintercept = mean(result$t), color = "#84a59d", linetype = "solid", linewidth = .75) +
geom_vline(xintercept = percentile_ci$percent[4], color = "#f6bd60", linetype = "dashed", linewidth = .75) +
geom_vline(xintercept = percentile_ci$percent[5], color = "#f6bd60", linetype = "dashed", linewidth = .75) +
geom_vline(xintercept = bca_ci$bca[4], color = "#f28482", linetype = "dotdash", linewidth = .75) +
geom_vline(xintercept = bca_ci$bca[5], color = "#f28482", linetype = "dotdash", linewidth = .75) +
annotate("text", x = mean(result$t) - .1, y = max(table(result$t)) + 1000, label = "Mean", color = "#84a59d", size = 3.75) +
annotate("text", x = percentile_ci$percent[4] + .2, y = max(table(result$t)) + 1000, label = "Percentile CI", color = "#f6bd60", size = 3.75) +
annotate("text", x = bca_ci$bca[4] - .125, y = max(table(result$t)) + 1000, label = "BCA CI", color = "#f28482", size = 3.75) +
theme(panel.background = element_rect(fill = "transparent"))
bca_ci$bca[5]
pre = c(22,25,17,24,16,29,20,23,19,20)
post = c(18,21,16,22,19,24,17,21,23,18)
pdiff0 = post-pre
Xpdiff0 = mean(pdiff0)
pdiff1 = boot(pdiff0, mean_func, R = 10000)
pdiff1_bca = boot.ci(pdiff1, type = "bca", conf = .95)
pdiff1_bca
pdiff1_mean_dist = data.frame(mean = pdiff1$t)
pdiff1_mean_dist %>% ggplot(aes(mean)) +
geom_histogram(bins = 30) +
ggtitle("Bootstrapped Mean Distribution with Confidence Intervals (BCA)") +
ylab("Frequency") +
xlab("Mean") +
geom_vline(xintercept = mean(pdiff1$t), color = "#84a59d", linetype = "solid", linewidth = .75) +
geom_vline(xintercept = pdiff1_bca$bca[4], color = "#f28482", linetype = "dashed", linewidth = .75) +
geom_vline(xintercept = pdiff1_bca$bca[5], color = "#f28482", linetype = "dashed", linewidth = .75) +
annotate("text", x = mean(pdiff1$t) - .25, y = max(table(pdiff1$t)) + 500, label = "Mean", color = "#84a59d", size = 3.75) +
annotate("text", x = pdiff1_bca$bca[4] - .35, y = max(table(pdiff1$t)) + 500, label = "CI (BCA)", color = "#f28482", size = 3.75) +
theme(panel.background = element_rect(fill = "transparent"))
#read data.table to read in
chili<- read.delim("https://raw.githubusercontent.com/jgeller112/psy504-advanced-stats/main/slides/03-Robust_Methods/data/chillis.csv")
my_penguins <- penguins %>%
filter(species == "Adelie",
!is.na(sex),
island == "Torgersen")
my_penguins
my_penguins %>% ggplot(aes(sex, body_mass_g, color = sex)) +
geom_point(position = position_jitter(width = .15, height = 0), size = 4, alpha = .65) +
scale_fill_manual(values = c("#ff006e", "#3a86ff")) +
ylab("Body Mass (g)") +
xlab("Sex")
sample_diff = my_penguins %>%
specify(body_mass_g ~ sex) %>%
calculate(stat = "diff in means", order = c("male", "female"))
sample_diff$stat
null_dist = my_penguins %>%
specify(body_mass_g ~ sex) %>%
hypothesize(null = "independence") %>%
generate(reps = 10000, type = "permute") %>%
calculate(stat = "diff in means", order = c("male", "female"))
null_dist %>%
visualize() + shade_p_value(obs_stat = sample_diff, direction = "two-sided")
null_dist %>%
get_p_value(obs_stat = sample_diff, direction = 'two-sided')
fac_data<-read_csv("https://raw.githubusercontent.com/jgeller112/psy503-psych_stats/master/static/assignment/data/fact_final.csv")
#Fit the model
model = aov(errors ~ convo * drive, data = fac_data)
#Output the results
summary(model)
permuco::aovperm(errors ~ convo * drive, data = fac_data, np = 10000, type = "permutation")
df <- data.frame(hours=c(1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4,
4, 5, 5, 5, 6, 6, 7, 7, 8),
score=c(67, 68, 74, 70, 71, 75, 80, 70, 84, 72,
88, 75, 95, 75, 99, 78, 99, 65, 96, 70))
mod = lm(score ~ hours, data = df)
summary(mod)
performance::check_model(mod, panel = FALSE)
performance::check_model(mod)
performance::check_model(mod, panel = FALSE)
performance::check_model(mod, check = "vif")
performance::check_model(mod)
#| layout-ncol: 2
#| layout-nrow: 3
performance::check_model(mod)
performance::check_model(mod)
performance::check_model(mod, check = "qq")
performance::check_model(mod, check = "normality")
performance::check_model(mod, check = "linearity")
performance::check_model(mod, check = "vif")
#| fig-height: 10
performance::check_model(mod)
#| fig-height: 30
performance::check_model(mod)
#| fig-height: 30
performance::check_model(mod, check = "vif")
#| fig-height: 30
performance::check_model(mod, check = "vif")
#| fig-height: 30
performance::check_model(mod, check = "vif")
performance::check_model(mod, check = "vif")
performance::check_model(mod, check = "vif")
performance::check_model(mod, check = "vif")
performance::check_model(mod, check = "normality")
performance::check_model(mod, check = "linearity")
ggplot(df, aes(x = hours, y = score)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
#1 - Linearity
performance::check_model(mod, check = c("linearity", "homogeneity")
#1 - Linearity
performance::check_model(mod, check = c("linearity", "homogeneity"))
#1 - Residual linearity
performance::check_model(mod, check = "all")
#1 - Residual linearity
performance::check_model(mod, check = c("linearity", "homogeneity"))
performance::check_model(mod, check = c("ncv"))
#Normality of residuals
performance::check_model(mod, check = c("qq", "normality"))
shapiro.test(mod$residuals)
performance::check_model(mod, check = c("overdispersion"))
performance::check_model(mod, check = c("overdispersion"))
performance::check_model(mod, check = c("outliers"))
performance::check_model(mod, check = c("pp_check"))
#1 - Residual linearity and homoscedasticity
performance::check_model(mod, check = c("linearity", "homogeneity"))
df %>% ggplot(aes(hours, score)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
?geom_smooth()
df %>% ggplot(aes(hours, score)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE)
df %>% ggplot(aes(hours, score)) +
geom_point(size = 4) +
geom_smooth(method = "loess", se = FALSE, color = '#84a59d')
df %>% ggplot(aes(hours, score)) +
geom_point(size = 4) +
geom_smooth(method = "loess", se = TRUE, color = '#84a59d')
df %>% ggplot(aes(hours, score)) +
geom_point(size = 4) +
geom_smooth(method = "loess", se = FALSE, color = '#84a59d')
performance::check_model(mod, check = c("all"))
performance::check_model(mod, check = "outliers")
mod_robust = lm_robust(mod)
